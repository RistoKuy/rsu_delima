name: Pull Request Automation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

jobs:
  # Auto-label PRs
  auto-label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Auto-label based on changes
      uses: actions/github-script@v7
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const labels = [];
          
          // Check for different types of changes
          const hasLibChanges = files.some(file => file.filename.startsWith('lib/'));
          const hasTestChanges = files.some(file => file.filename.includes('test'));
          const hasDocChanges = files.some(file => file.filename.endsWith('.md'));
          const hasConfigChanges = files.some(file => 
            file.filename.includes('pubspec.yaml') || 
            file.filename.includes('.yaml') || 
            file.filename.includes('.yml')
          );
          const hasUIChanges = files.some(file => 
            file.filename.includes('screen') || 
            file.filename.includes('widget')
          );
          const hasModelChanges = files.some(file => file.filename.includes('models/'));
          const hasServiceChanges = files.some(file => file.filename.includes('services/'));
          
          if (hasLibChanges) labels.push('code-change');
          if (hasTestChanges) labels.push('testing');
          if (hasDocChanges) labels.push('documentation');
          if (hasConfigChanges) labels.push('configuration');
          if (hasUIChanges) labels.push('ui/ux');
          if (hasModelChanges) labels.push('data-model');
          if (hasServiceChanges) labels.push('backend');
          
          // Check size of PR
          const additions = files.reduce((sum, file) => sum + file.additions, 0);
          const deletions = files.reduce((sum, file) => sum + file.deletions, 0);
          const totalChanges = additions + deletions;
          
          if (totalChanges < 50) labels.push('size/small');
          else if (totalChanges < 200) labels.push('size/medium');
          else labels.push('size/large');
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels
            });
          }

  # PR Quality Check
  pr-quality-check:
    name: PR Quality Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.2'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Check PR quality
      run: |
        echo "## PR Quality Report" > pr-quality.md
        echo "" >> pr-quality.md
        
        # Check commit messages
        echo "### Commit Messages" >> pr-quality.md
        git log --oneline origin/main..HEAD >> pr-quality.md
        echo "" >> pr-quality.md
        
        # Check for breaking changes
        echo "### Breaking Changes Check" >> pr-quality.md
        if git diff origin/main..HEAD --name-only | grep -E "(models/|services/)" > /dev/null; then
          echo "⚠️ Potential breaking changes detected in models or services" >> pr-quality.md
        else
          echo "✅ No breaking changes detected" >> pr-quality.md
        fi
        echo "" >> pr-quality.md
        
        # Check test coverage
        echo "### Test Coverage" >> pr-quality.md
        if flutter test --coverage; then
          COVERAGE=$(grep -o "lines\.\.\.\.\.\.\: [0-9.]*%" coverage/lcov.info | head -1 | grep -o "[0-9.]*")
          echo "Test coverage: ${COVERAGE}%" >> pr-quality.md
        else
          echo "❌ Tests are failing" >> pr-quality.md
        fi
        
    - name: Comment PR with quality report
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const qualityReport = fs.readFileSync('pr-quality.md', 'utf8');
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: qualityReport
          });

  # Auto-merge for dependency updates
  auto-merge:
    name: Auto Merge
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
    
    steps:
    - name: Check if PR is from dependabot or automated
      uses: actions/github-script@v7
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          });
          
          const isAutomated = pr.data.user.login === 'dependabot[bot]' || 
                             pr.data.head.ref.startsWith('automated/');
          
          if (isAutomated) {
            // Check if all checks pass
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.data.head.sha
            });
            
            const allPassed = checks.data.check_runs.every(check => 
              check.status === 'completed' && check.conclusion === 'success'
            );
            
            if (allPassed) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                merge_method: 'squash'
              });
              
              console.log('Automatically merged approved automated PR');
            }
          }

  # Update changelog
  update-changelog:
    name: Update Changelog
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update changelog
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        PR_URL="${{ github.event.pull_request.html_url }}"
        
        # Create changelog entry
        DATE=$(date +%Y-%m-%d)
        ENTRY="- ${PR_TITLE} ([#${PR_NUMBER}](${PR_URL}))"
        
        # Update CHANGELOG.md if it exists, create if it doesn't
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [Unreleased]" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Add entry under Unreleased section
        sed -i "/## \[Unreleased\]/a\\$ENTRY" CHANGELOG.md
        
    - name: Commit changelog
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "chore: update changelog for PR #${{ github.event.pull_request.number }}" || exit 0
        git push
