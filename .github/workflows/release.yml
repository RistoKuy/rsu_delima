name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get tag name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "tag_name=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate changelog
      run: |
        echo "# Release Notes" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s" $LAST_TAG..HEAD >> RELEASE_NOTES.md
        else
          echo "## Initial Release" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "This is the first release of RSU Delima Hospital Management App." >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "## Features" >> RELEASE_NOTES.md
        echo "- 🏥 Complete hospital management system" >> RELEASE_NOTES.md
        echo "- 👩‍⚕️ Doctor appointment booking" >> RELEASE_NOTES.md
        echo "- 📱 Multi-platform support (Android, iOS, Web, Windows)" >> RELEASE_NOTES.md
        echo "- 🚀 Optimized performance and minimal app size" >> RELEASE_NOTES.md
        echo "- 🔒 Secure user authentication" >> RELEASE_NOTES.md
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.tag_name }}
        release_name: RSU Delima ${{ steps.get_tag.outputs.tag_name }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}

  # Build and Upload Release Assets
  build-release-assets:
    name: Build Release Assets
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: android
          - os: ubuntu-latest
            platform: web
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: ios
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java (Android only)
      if: matrix.platform == 'android'
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.2'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Generate launcher icons
      run: flutter pub run flutter_launcher_icons
      
    # Android Build
    - name: Build Android APK
      if: matrix.platform == 'android'
      run: |
        flutter build apk --release --obfuscate --split-debug-info=build/debug-info
        flutter build appbundle --release --obfuscate --split-debug-info=build/debug-info
        
    - name: Upload Android APK
      if: matrix.platform == 'android'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-release.apk
        asset_name: rsu-delima-${{ needs.create-release.outputs.tag_name }}-android.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload Android App Bundle
      if: matrix.platform == 'android'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/app/outputs/bundle/release/app-release.aab
        asset_name: rsu-delima-${{ needs.create-release.outputs.tag_name }}-android.aab
        asset_content_type: application/octet-stream
        
    # Web Build
    - name: Build Web
      if: matrix.platform == 'web'
      run: flutter build web --release --web-renderer html
      
    - name: Package Web Build
      if: matrix.platform == 'web'
      run: |
        cd build
        tar -czf rsu-delima-${{ needs.create-release.outputs.tag_name }}-web.tar.gz web/
        
    - name: Upload Web Build
      if: matrix.platform == 'web'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/rsu-delima-${{ needs.create-release.outputs.tag_name }}-web.tar.gz
        asset_name: rsu-delima-${{ needs.create-release.outputs.tag_name }}-web.tar.gz
        asset_content_type: application/gzip
        
    # Windows Build
    - name: Build Windows
      if: matrix.platform == 'windows'
      run: flutter build windows --release
      
    - name: Package Windows Build
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath "rsu-delima-${{ needs.create-release.outputs.tag_name }}-windows.zip"
        
    - name: Upload Windows Build
      if: matrix.platform == 'windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: rsu-delima-${{ needs.create-release.outputs.tag_name }}-windows.zip
        asset_name: rsu-delima-${{ needs.create-release.outputs.tag_name }}-windows.zip
        asset_content_type: application/zip
        
    # iOS Build
    - name: Build iOS
      if: matrix.platform == 'ios'
      run: |
        flutter build ios --release --no-codesign
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
                   -scheme Runner \
                   -configuration Release \
                   -archivePath build/Runner.xcarchive \
                   archive
                   
    - name: Package iOS Build
      if: matrix.platform == 'ios'
      run: |
        cd ios
        tar -czf rsu-delima-${{ needs.create-release.outputs.tag_name }}-ios.tar.gz build/Runner.xcarchive
        
    - name: Upload iOS Build
      if: matrix.platform == 'ios'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ios/rsu-delima-${{ needs.create-release.outputs.tag_name }}-ios.tar.gz
        asset_name: rsu-delima-${{ needs.create-release.outputs.tag_name }}-ios.tar.gz
        asset_content_type: application/gzip

  # Notify release
  notify-release:
    name: Notify Release
    needs: [create-release, build-release-assets]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify team
      run: |
        echo "🎉 RSU Delima ${{ needs.create-release.outputs.tag_name }} has been released!"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.tag_name }}"
        
    # Optional: Send notification to Slack/Discord/Teams
    # - name: Slack Notification
    #   if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: success
    #     text: "🎉 RSU Delima ${{ needs.create-release.outputs.tag_name }} has been released!"
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
